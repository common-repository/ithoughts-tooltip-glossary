{"version":3,"sources":["../src/ithoughts_tt_gl-tinymce.js"],"names":["selfCalling","ithoughts","$","itg","iThoughtsTooltipGlossary","itge","iThoughtsTooltipGlossaryEditor","prefix2","prefix3","tipsTypes","tipsSelector","map","wrapTypes","e","join","setToggleable","element","editor","toggle","self","on","setElementActive","active","tinymce","PluginManager","add","registerTinyMCEPlugin","contentCSS","push","baseurl","glossarytermremovefct","currentNode","selection","getNode","$currentNode","$node","closest","node","get","html","innerHTML","replaceWith","beforeSetContent","event","content","replaceShortcodes","getContent","restoreShortcodes","nodeChange","length","fire","indexOf","getAttribute","generateSelObject","tinymceSel","sel","DOM","toArray","format","start","getStart","end","getEnd","insertInTinyMCE","shortcode","mode","select","error","insertContent","addButton","title","getLang","image","base_tinymce","onPostRender","onclick","editorForms","tip","parseHTML","list","iThoughts","v5"],"mappings":"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","file":"ithoughts_tt_gl-tinymce.js","sourcesContent":["/**\n * @file TinyMCE plugin scripts\n *\n * @author Gerkin\n * @copyright 2016 GerkinDevelopment\n * @license http://www.gnu.org/licenses/old-licenses/gpl-2.0.fr.html GPLv2\n * @package ithoughts-tooltip-glossary\n *\n * @version 2.7.0\n */\n\n'use strict';\n\n/* global tinymce:false, iThoughtsTooltipGlossaryEditor: false */\n\n( function selfCalling( ithoughts ) {\n\tvar $\t\t\t\t= ithoughts.$,\n\t\titg\t\t\t\t= iThoughtsTooltipGlossary,\n\t\titge\t\t\t= iThoughtsTooltipGlossaryEditor,\n\t\tprefix2\t\t\t= 'ithoughts_tt_gl_tinymce',\n\t\tprefix3\t\t\t= 'ithoughts-tooltip-glossary',\n\t\ttipsTypes\t\t= [\n\t\t\t'itg-term',\n\t\t\t'itg-tooltip',\n\t\t\t'itg-mediatip',\n\t\t],\n\t\ttipsSelector\t= tipsTypes.map( function wrapTypes( e ) {\n\t\t\treturn `[data-type=\"${  e  }\"]`;\n\t\t}).join( ',' );\n\n\tfunction setToggleable( element, editor ) {\n\t\treturn function toggle() {\n\t\t\tvar self = this;\n\t\t\teditor.on( element, function setElementActive( e ) {\n\t\t\t\tself.active( e.active );\n\t\t\t});\n\t\t};\n\t}\n\n\ttinymce.PluginManager.add( prefix2, function registerTinyMCEPlugin( editor ) {\n\t\t//CSS\n\t\teditor.contentCSS.push( `${ itg.baseurl }/css/ithoughts_tt_gl-admin.min.css?v=2.7.0` );\n\t\t/*\n\n\t\tfunction getLang(str) {\n\t\t\teditor.getLang(prefix2 + str);\n\t\t}\n*/\n\n\t\tfunction glossarytermremovefct() {\n\t\t\tvar currentNode = editor.selection.getNode(),\n\t\t\t\t$currentNode = $( currentNode ),\n\t\t\t\t$node = $currentNode.closest( tipsSelector ),\n\t\t\t\tnode = $node.get( 0 );\n\t\t\tif ( !node ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar html = node.innerHTML;\n\t\t\t$node.replaceWith( html );\n\t\t}\n\n\t\teditor.on( 'BeforeSetcontent', function beforeSetContent( event ) { //replace from shortcode to displayable html content\n\t\t\tevent.content = itge.replaceShortcodes( event.content );\n\t\t}).on( 'GetContent', function getContent( event ) { //replace from displayable html content to shortcode\n\t\t\tevent.content = itge.restoreShortcodes( event.content );\n\t\t}).on( 'NodeChange', function nodeChange( event ) {\n\t\t\tvar element = event.element;\n\t\t\tif ( $( element ).closest( tipsSelector ).length > 0 ) {\n\t\t\t\teditor.fire( 'glossaryterm', {\n\t\t\t\t\tactive: true,\n\t\t\t\t});\n\t\t\t\teditor.fire( 'glossaryterm-d', {\n\t\t\t\t\tactive: true,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\teditor.fire( 'glossaryterm', {\n\t\t\t\t\tactive: false,\n\t\t\t\t});\n\t\t\t\teditor.fire( 'glossaryterm-d', {\n\t\t\t\t\tactive: false,\n\t\t\t\t});\n\t\t\t}\n\t\t\tif ([ `${ prefix3  }-term_list`, `${ prefix3  }-atoz` ].indexOf( element.getAttribute( 'data-type' )) !== -1 ) {\n\t\t\t\teditor.fire( 'glossarylist', {\n\t\t\t\t\tactive: true,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\teditor.fire( 'glossarylist', {\n\t\t\t\t\tactive: false,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\n\t\tfunction generateSelObject() {\n\t\t\tvar tinymceSel = editor.selection,\n\t\t\t\tsel = {\n\t\t\t\t\tDOM: $( tinymceSel.getNode()).closest( tipsSelector ).toArray(),\n\t\t\t\t};\n\t\t\tsel.html = tinymceSel.getContent({\n\t\t\t\tformat: 'html',\n\t\t\t});\n\t\t\tsel.start = tinymceSel.getStart();\n\t\t\tsel.end = tinymceSel.getEnd();\n\t\t\treturn sel;\n\t\t}\n\t\tfunction insertInTinyMCE( shortcode, mode ) {\n\t\t\t// Insert content when the window form is submitted\n\t\t\tif ( 'load' === mode ) {\n\t\t\t\teditor.selection.select( editor.selection.getStart());\n\t\t\t} else if ( mode.indexOf( 'extend' ) > -1 ) {\n\t\t\t\titge.error( 'Unhandled mode \"extend\" during writing of new tooltip shortcode' );\n\t\t\t}\n\t\t\teditor.insertContent( shortcode );\n\t\t}\n\n\t\t// Add a button that opens a window\n\t\teditor.addButton( 'glossaryterm', {\n\t\t\ttitle:        editor.getLang( `${ prefix2  }.add_tooltip` ),\n\t\t\timage:        `${ itge.base_tinymce }/icon/glossaryterm.png`,\n\t\t\tonPostRender: setToggleable( 'glossaryterm', editor ),\n\t\t\tonclick:      function onclick() {\n\t\t\t\titge.editorForms.tip( generateSelObject(), insertInTinyMCE );\n\t\t\t},\n\t\t});\n\t\t// Add the equivalent delete button\n\t\teditor.addButton( 'glossaryterm-d', {\n\t\t\ttitle:        editor.getLang( `${ prefix2  }.remove_tooltip` ),\n\t\t\timage:        `${ itge.base_tinymce  }/icon/glossaryterm-d.png`,\n\t\t\tonPostRender: setToggleable( 'glossaryterm-d', editor ),\n\t\t\tonclick:      glossarytermremovefct,\n\t\t});\n\n\t\teditor.addButton( 'glossarylist', {\n\t\t\ttitle:\t\t\t     editor.getLang( `${ prefix2  }.add_index` ),\n\t\t\timage:\t\t\t     `${ itge.base_tinymce }/icon/glossaryindex.png`,\n\t\t\tonPostRender:\tsetToggleable( 'glossarylist', editor ),\n\t\t\tonclick:\t\t    function onclick() {\n\t\t\t\tvar sel = {\n\t\t\t\t\tselection: editor.selection,\n\t\t\t\t};\n\t\t\t\tsel.start = sel.selection.getStart();\n\t\t\t\tsel.end = sel.selection.getEnd();\n\t\t\t\tsel.DOM = $.parseHTML( sel.selection );\n\t\t\t\titge.editorForms.list( generateSelObject(), insertInTinyMCE );\n\t\t\t},\n\t\t});\n\t});\n}( iThoughts.v5 ));\n"]}